// Code generated by thriftrw-plugin-yarpc
// @generated

package metatest

import (
	"code.uber.internal/go/health.git/internal/meta"
	"go.uber.org/yarpc"
	"github.com/golang/mock/gomock"
	"context"
	"code.uber.internal/go/health.git/internal/meta/metaclient"
)

// MockClient implements a gomock-compatible mock client for service
// Meta.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *_MockClientRecorder
}

var _ metaclient.Interface = (*MockClient)(nil)

type _MockClientRecorder struct {
	mock *MockClient
}

// Build a new mock client for service Meta.
//
// 	mockCtrl := gomock.NewController(t)
// 	client := metatest.NewMockClient(mockCtrl)
//
// Use EXPECT() to set expectations on the mock.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

// EXPECT returns an object that allows you to define an expectation on the
// Meta mock client.
func (m *MockClient) EXPECT() *_MockClientRecorder {
	return m.recorder
}

// Health responds to a Health call based on the mock expectations. This
// call will fail if the mock does not expect this call. Use EXPECT to expect
// a call to this function.
//
// 	client.EXPECT().Health(gomock.Any(), ...).Return(...)
// 	... := client.Health(...)
func (m *MockClient) Health(
	ctx context.Context,
	_Hr *meta.HealthRequest,
	opts ...yarpc.CallOption,
) (success *meta.HealthStatus, err error) {

	args := []interface{}{ctx, _Hr}
	for _, o := range opts {
		args = append(args, o)
	}
	i := 0
	ret := m.ctrl.Call(m, "Health", args...)
	success, _ = ret[i].(*meta.HealthStatus)
	i++
	err, _ = ret[i].(error)
	return
}

func (mr *_MockClientRecorder) Health(
	ctx interface{},
	_Hr interface{},
	opts ...interface{},
) *gomock.Call {
	args := append([]interface{}{ctx, _Hr}, opts...)
	return mr.mock.ctrl.RecordCall(mr.mock, "Health", args...)
}
