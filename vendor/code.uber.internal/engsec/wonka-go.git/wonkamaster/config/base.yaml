service:
  name: wonkamaster

galileo:
  servicename: wonkamaster
  allowedgroups: ["AD:engineering"]
  endpoints:
    /admin:
      allow_write: ["AD:wonka-admins"]
    /enroll:
      allow_write: ["AD:engineering"]
      allow_read: ["AD:engineering"]

port: 6746
hose_check_interval: 600

tracing:
  disabled: false
  rpc_metrics: true

cassandra:
  hosts: ["127.0.0.1"]
  port: 9042
  keyspace: "development"
  username: "cassandra"
  password: "cassandra"

launchers:
  mesos:
    launched_by: "^mesos-master\\d{2}-\\w{3}\\d\\.prod\\.uber\\.internal$"
    launched_on: "^compute\\d{2}-\\w{3}\\d\\.prod\\.uber\\.internal$"
    taskname: "^[^:]+$"
  udeploy_classic:
    launched_by: "^udeploy-master\\d{2}-\\w{3}\\d\\.prod\\.uber\\.internal$"
    launched_on: "^appdocker\\d{2}-\\w{3}\\d\\.prod\\.uber\\.internal$"
    taskname: "^[^:]+$"

derelicts:
  # this will install a 'derelict' service that will be valid until
  # our 32 bit time_t overflows. this is so we can do a positive
  # test on IsDerelict
  libwonka-integration-test: 2038/01/01

# This section defines a policy for overriding how certificate authentication
# is performed. For example, this would be useful after an extended outage where
# certificate refresh may not work correctly by default if those original certificates
# have expired.
#
# cert_auth_override:
#   grant:
#     signed_after: 2017-11-05T12:00:00Z
#     signed_before: 2017-11-05T12:00:00Z
# 		enforce_until: 2017-11-05T12:00:00Z

# Rate defines a dynamic rate limiting system. It can be defined globally
# for all requests, or per entity, or per endpoint or a combination of all three.
# Rate limiting is done via a token bucket that adds 'r' tokens per second, with
# a maximum number of tokens 'b', also known as the burst. No definition means
# there will be no rate limiting. 
#
# rate:
#   global:
#     events_per_second: 10000
#     burst_limit: 20000
#   endpoints:   
#     - path: /thehose
#       events_per_second: 1000
#       burst_limit: 1000
#     - path: /health
#       events_per_second: 0
#       burst_limit: 0