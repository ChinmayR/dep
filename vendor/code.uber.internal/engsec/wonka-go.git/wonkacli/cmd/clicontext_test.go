// Code generated by mockery v1.0.0
package cmd

import (
	"context"
	"io"
	"time"

	"code.uber.internal/engsec/wonka-go.git"
	"code.uber.internal/engsec/wonka-go.git/internal/keyhelper"

	"github.com/stretchr/testify/mock"
	"github.com/urfave/cli"
)

// MockCLIContext is an autogenerated mock type for the MockCLIContext type
type MockCLIContext struct {
	mock.Mock
}

// Args provides a mock function with given fields:
func (_m *MockCLIContext) Args() cli.Args {
	ret := _m.Called()

	var r0 cli.Args
	if rf, ok := ret.Get(0).(func() cli.Args); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cli.Args)
		}
	}

	return r0
}

// Bool provides a mock function with given fields: _a0
func (_m *MockCLIContext) Bool(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Command provides a mock function with given fields:
func (_m *MockCLIContext) Command() cli.Command {
	ret := _m.Called()

	var r0 cli.Command
	if rf, ok := ret.Get(0).(func() cli.Command); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cli.Command)
	}

	return r0
}

// Context provides a mock function with given fields:
func (_m *MockCLIContext) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Duration provides a mock function with given fields: _a0
func (_m *MockCLIContext) Duration(_a0 string) time.Duration {
	ret := _m.Called(_a0)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(string) time.Duration); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GlobalBool provides a mock function with given fields: _a0
func (_m *MockCLIContext) GlobalBool(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GlobalString provides a mock function with given fields: _a0
func (_m *MockCLIContext) GlobalString(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Metadata provides a mock function with given fields:
func (_m *MockCLIContext) Metadata() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// NewKeyHelper provides a mock function with given fields:
func (_m *MockCLIContext) NewKeyHelper() keyhelper.KeyHelper {
	ret := _m.Called()

	var r0 keyhelper.KeyHelper
	if rf, ok := ret.Get(0).(func() keyhelper.KeyHelper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(keyhelper.KeyHelper)
		}
	}

	return r0
}

// NewWonkaClient provides a mock function with given fields: _a0
func (_m *MockCLIContext) NewWonkaClient(_a0 WonkaClientType) (wonka.Wonka, error) {
	ret := _m.Called(_a0)

	var r0 wonka.Wonka
	if rf, ok := ret.Get(0).(func(WonkaClientType) wonka.Wonka); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wonka.Wonka)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(WonkaClientType) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWonkaClientFromConfig provides a mock function with given fields: _a0
func (_m *MockCLIContext) NewWonkaClientFromConfig(_a0 wonka.Config) (wonka.Wonka, error) {
	ret := _m.Called(_a0)

	var r0 wonka.Wonka
	if rf, ok := ret.Get(0).(func(wonka.Config) wonka.Wonka); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wonka.Wonka)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(wonka.Config) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields: _a0
func (_m *MockCLIContext) String(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// StringOrFirstArg provides a mock function with given fields: _a0
func (_m *MockCLIContext) StringOrFirstArg(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// StringSlice provides a mock function with given fields: _a0
func (_m *MockCLIContext) StringSlice(_a0 string) []string {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// WonkaConfig provides a mock function with given fields:
func (_m *MockCLIContext) WonkaConfig() wonka.Config {
	ret := _m.Called()

	var r0 wonka.Config
	if rf, ok := ret.Get(0).(func() wonka.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(wonka.Config)
	}

	return r0
}

// Writer provides a mock function with given fields:
func (_m *MockCLIContext) Writer() io.Writer {
	ret := _m.Called()

	var r0 io.Writer
	if rf, ok := ret.Get(0).(func() io.Writer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Writer)
		}
	}

	return r0
}
