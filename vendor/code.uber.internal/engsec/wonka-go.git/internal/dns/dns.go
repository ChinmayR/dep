package dns

import (
	"context"
	"errors"
	"fmt"
	"io/ioutil"
	"net"
	"os"
	"path"
	"strings"
)

// WonkaPanicDirEnv is the environment variable for setting a local panic (without
// needing to create a DNS TXT record).
// It should be set to the name of the directory where you've placed a file containing
// the TXT record. The filename is of the format "<pubkey_hash>.uberinternal.com" and
// it should contain a signed disable message generated by wonkacli (see: PANICKING.md).
const WonkaPanicDirEnv = "WONKA_PANIC_DIR"

// DefaultClient uses net.LookupTXT to find a DNS record, unless WonkaPanicDirEnv is set.
var DefaultClient = newClient()

// Client provides an abstraction over DNS lookup functions.
type Client interface {
	// LookupTXT fetches a list of TXT records for the provided hostname.
	LookupTXT(ctx context.Context, name string) (entries []string, err error)
}

func newClient() Client {
	if panicDir := os.Getenv(WonkaPanicDirEnv); panicDir != "" {
		return NewFSClient(panicDir)
	}
	return NewNetClient()
}

// NewNetClient returns a client that uses the "net" package for resolving DNS queries.
func NewNetClient() Client {
	return netClient{}
}

type netClient struct{}

func (r netClient) LookupTXT(ctx context.Context, name string) ([]string, error) {
	return net.DefaultResolver.LookupTXT(ctx, name)
}

// NewFSClient returns a client that uses the local filesystem for resolving DNS queries.
func NewFSClient(dir string) Client {
	return fsClient{
		dir: dir,
	}
}

type fsClient struct {
	dir string
}

func (r fsClient) LookupTXT(ctx context.Context, name string) ([]string, error) {
	filename := path.Join(r.dir, name)
	b, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, fmt.Errorf("error reading local panic file: %v", err)
	}
	records := strings.Split(string(b), "\n")
	if len(records) == 0 || (len(records) == 1 && records[0] == "") {
		return nil, fmt.Errorf("local panic: no records found in file %s", filename)
	}
	return records, nil
}

// NewMockClient returns a client that returns any records passed into this constructor.
func NewMockClient(records []string) Client {
	return mockClient{
		records: records,
	}
}

type mockClient struct {
	records []string
}

func (r mockClient) LookupTXT(ctx context.Context, name string) ([]string, error) {
	if len(r.records) == 0 {
		return nil, errors.New("no records found")
	}
	return r.records, nil
}
