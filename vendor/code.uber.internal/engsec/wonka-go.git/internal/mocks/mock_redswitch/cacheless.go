// Automatically generated by MockGen. DO NOT EDIT!
// Source: code.uber.internal/engsec/wonka-go.git/redswitch (interfaces: CachelessReader)

package mock_redswitch

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
)

// Mock of CachelessReader interface
type MockCachelessReader struct {
	ctrl     *gomock.Controller
	recorder *_MockCachelessReaderRecorder
}

// Recorder for MockCachelessReader (not exported)
type _MockCachelessReaderRecorder struct {
	mock *MockCachelessReader
}

func NewMockCachelessReader(ctrl *gomock.Controller) *MockCachelessReader {
	mock := &MockCachelessReader{ctrl: ctrl}
	mock.recorder = &_MockCachelessReaderRecorder{mock}
	return mock
}

func (_m *MockCachelessReader) EXPECT() *_MockCachelessReaderRecorder {
	return _m.recorder
}

func (_m *MockCachelessReader) ForceCheckIsDisabled(_param0 context.Context) bool {
	ret := _m.ctrl.Call(_m, "ForceCheckIsDisabled", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockCachelessReaderRecorder) ForceCheckIsDisabled(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ForceCheckIsDisabled", arg0)
}

func (_m *MockCachelessReader) IsDisabled() bool {
	ret := _m.ctrl.Call(_m, "IsDisabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockCachelessReaderRecorder) IsDisabled() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsDisabled")
}
