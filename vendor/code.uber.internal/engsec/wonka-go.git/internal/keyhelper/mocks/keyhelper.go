// Package mocks KeyHelper
// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import rsa "crypto/rsa"

// KeyHelper is an autogenerated mock type for the KeyHelper type
type KeyHelper struct {
	mock.Mock
}

// RSAAndECC provides a mock function with given fields: _a0
func (_m *KeyHelper) RSAAndECC(_a0 string) (*rsa.PrivateKey, string, string, error) {
	ret := _m.Called(_a0)

	var r0 *rsa.PrivateKey
	if rf, ok := ret.Get(0).(func(string) *rsa.PrivateKey); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rsa.PrivateKey)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string) string); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(_a0)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// RSAFromFile provides a mock function with given fields: _a0
func (_m *KeyHelper) RSAFromFile(_a0 string) (*rsa.PrivateKey, error) {
	ret := _m.Called(_a0)

	var r0 *rsa.PrivateKey
	if rf, ok := ret.Get(0).(func(string) *rsa.PrivateKey); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rsa.PrivateKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
